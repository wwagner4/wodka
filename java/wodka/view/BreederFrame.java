package wodka.view;

import java.awt.Font;
import java.io.File;
import java.net.URL;

import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.plaf.FontUIResource;

import org.apache.log4j.Logger;

import wodka.ApplicationManager;
import wodka.ga.GeneticAlgorithm;
import wodka.ga.soda.Breeder;
import wodka.ga.soda.SodaraceGeneticAlgorithm;
import wodka.util.Exporter;
import wodka.util.PersistanceHandler;
import wwan.commons.param.ListParam;
import wwan.commons.param.ParamException;
import wwan.commons.param.view.WizardDialog;

/**
 * The main frame of the Breeder.
 */
public class BreederFrame extends javax.swing.JFrame implements
        wodka.ExceptionHandler, wodka.ga.soda.BreederListener {

    private static final long serialVersionUID = 1L;

    private static final int YES = JOptionPane.YES_OPTION;

    private static final int NO = JOptionPane.NO_OPTION;

    private static Logger logger = Logger.getLogger(BreederFrame.class);

    public BreederFrame() {
        initComponents();
        URL bottelImg = loadResource("bottle.jpg");
        if (bottelImg != null) {
            ImageIcon img = new ImageIcon(bottelImg);
            this.setIconImage(img.getImage());
        }
        this.breeder = new Breeder();
        this.breeder.setExceptionHandler(this);
        this.setBreeder(breeder);
        this.setLocation(0, 0);
        this.categorizedInfoPanel1.setModel(breeder);
        this.categorizedInfoPanel1.updateViewFromModel();
        this.categorizedInfoPanel1.setVisible(false);
        this.pack();
    }

    private java.net.URL loadResource(String res) {
        return getClass().getClassLoader().getResource(res);
    }

    private void initFileChooser() {
        if (fileChooser == null) {
            fileChooser = new JFileChooser();
            File wodkaDir = ApplicationManager.current().homeDirectory();
            fileChooser.setCurrentDirectory(wodkaDir);
            Breeder lBreeder = getBreeder();
            if (lBreeder != null) {
                GeneticAlgorithm ga = lBreeder.getGenAlgo();
                if (ga != null) {
                    String shortName = ga.getLabel();
                    String fileName = shortName;
                    File file = new File(wodkaDir, fileName);
                    fileChooser.setSelectedFile(file);
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void initComponents() { // GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        buttonsPanel = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        buttonsFullPanel = new javax.swing.JPanel();
        infoToggleButton = new javax.swing.JToggleButton();
        newButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        infoTextField = new javax.swing.JTextField();
        categorizedInfoPanel1 = new wodka.view.CategorizedInfoPanel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        newMenuItem = new javax.swing.JMenuItem();
        editMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        saveMenuItem = new javax.swing.JMenuItem();
        loadMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        exportMenuItem = new javax.swing.JMenuItem();
        controlMenu = new javax.swing.JMenu();
        startMenuItem = new javax.swing.JMenuItem();
        stopMenuItem = new javax.swing.JMenuItem();
        viewMenu = new javax.swing.JMenu();
        viewProgressMenuItem = new javax.swing.JMenuItem();
        startSodaRacerMenuItem = new javax.swing.JMenuItem();
        startSodaConstructorMenuItem = new javax.swing.JMenuItem();
        aboutMenu = new javax.swing.JMenu();
        aboutMenuItem = new javax.swing.JMenuItem();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        setTitle("wodka breeder");
        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm();
            }
        });

        buttonsPanel.setLayout(new java.awt.GridBagLayout());

        buttonsPanel.setBorder(new javax.swing.border.EmptyBorder(
                new java.awt.Insets(3, 3, 3, 3)));
        startButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                "/start.png")));
        startButton.setToolTipText("start");
        startButton.setText("start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed();
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        buttonsPanel.add(startButton, gridBagConstraints);

        stopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                "/stop.png")));
        stopButton.setToolTipText("stop");
        stopButton.setText("stop");
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed();
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        buttonsPanel.add(stopButton, gridBagConstraints);

        buttonsFullPanel.setLayout(null);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        buttonsPanel.add(buttonsFullPanel, gridBagConstraints);

        infoToggleButton.setFont(new java.awt.Font("Courier New", 1, 12));
        infoToggleButton.setText("i");
        infoToggleButton
                .addChangeListener(new javax.swing.event.ChangeListener() {
                    public void stateChanged(javax.swing.event.ChangeEvent evt) {
                        infoToggleButtonStateChanged();
                    }
                });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        buttonsPanel.add(infoToggleButton, gridBagConstraints);

        newButton.setText("new");
        newButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newButtonActionPerformed();
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        buttonsPanel.add(newButton, gridBagConstraints);

        saveButton.setText("save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed();
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 0);
        buttonsPanel.add(saveButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        getContentPane().add(buttonsPanel, gridBagConstraints);

        infoTextField.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
        getContentPane().add(infoTextField, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
        getContentPane().add(categorizedInfoPanel1, gridBagConstraints);

        fileMenu.setMnemonic('f');
        fileMenu.setText("file");
        newMenuItem.setMnemonic('n');
        newMenuItem.setText("new");
        newMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuItemActionPerformed();
            }
        });

        fileMenu.add(newMenuItem);

        editMenuItem.setMnemonic('e');
        editMenuItem.setText("edit");
        editMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editMenuItemActionPerformed();
            }
        });

        fileMenu.add(editMenuItem);

        fileMenu.add(jSeparator1);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed();
            }
        });

        fileMenu.add(saveMenuItem);

        loadMenuItem.setMnemonic('l');
        loadMenuItem.setText("load");
        loadMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadMenuItemActionPerformed();
            }
        });

        fileMenu.add(loadMenuItem);

        fileMenu.add(jSeparator3);

        exportMenuItem.setMnemonic('e');
        exportMenuItem.setText("export");
        exportMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportMenuItemActionPerformed();
            }
        });

        fileMenu.add(exportMenuItem);

        menuBar.add(fileMenu);

        controlMenu.setMnemonic('c');
        controlMenu.setText("control");
        startMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                "/start.png")));
        startMenuItem.setMnemonic('s');
        startMenuItem.setText("start");
        startMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startMenuItemActionPerformed();
            }
        });

        controlMenu.add(startMenuItem);

        stopMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource(
                "/stop.png")));
        stopMenuItem.setMnemonic('t');
        stopMenuItem.setText("stop");
        stopMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopMenuItemActionPerformed();
            }
        });

        controlMenu.add(stopMenuItem);

        menuBar.add(controlMenu);

        viewMenu.setMnemonic('v');
        viewMenu.setText("view");
        viewProgressMenuItem.setMnemonic('v');
        viewProgressMenuItem.setText("view progress");
        viewProgressMenuItem
                .addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        viewProgressMenuItemActionPerformed();
                    }
                });

        viewMenu.add(viewProgressMenuItem);

        startSodaRacerMenuItem.setText("start sodaracer");
        startSodaRacerMenuItem
                .addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        startSodaRacerMenuItemActionPerformed();
                    }
                });

        viewMenu.add(startSodaRacerMenuItem);

        startSodaConstructorMenuItem.setText("start soda constructor");
        startSodaConstructorMenuItem
                .addActionListener(new java.awt.event.ActionListener() {
                    public void actionPerformed(java.awt.event.ActionEvent evt) {
                        startSodaConstructorMenuItemActionPerformed();
                    }
                });

        viewMenu.add(startSodaConstructorMenuItem);

        menuBar.add(viewMenu);

        aboutMenu.setMnemonic('a');
        aboutMenu.setText("about");
        aboutMenuItem.setText("about");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed();
            }
        });

        aboutMenu.add(aboutMenuItem);

        menuBar.add(aboutMenu);

        setJMenuBar(menuBar);

        pack();
    } // GEN-END:initComponents

    private void newButtonActionPerformed() { // GEN-FIRST:event_newButtonActionPerformed
        try {
            newGA();
        } catch (Throwable ex) {
            this.handleThrowable(ex);
        }
    } // GEN-LAST:event_newButtonActionPerformed

    private void saveButtonActionPerformed() { // GEN-FIRST:event_saveButtonActionPerformed
        try {
            save();
        } catch (Throwable ex) {
            this.handleThrowableWithoutStop(ex);
        }
    } // GEN-LAST:event_saveButtonActionPerformed

    private void infoToggleButtonStateChanged() { // GEN-FIRST:event_infoToggleButtonStateChanged
        try {
            this.categorizedInfoPanel1.setVisible(this.infoToggleButton
                    .isSelected());
            this.pack();
        } catch (Throwable ex) {
            this.handleThrowable(ex);
        }
    } // GEN-LAST:event_infoToggleButtonStateChanged

    private void startSodaConstructorMenuItemActionPerformed() { // GEN-FIRST:event_startSodaConstructorMenuItemActionPerformed
        try {
            wodka.ApplicationManager.current().startSodaconstructor();
        } catch (Throwable ex) {
            this.handleThrowable(ex);
        } // Add your handling code here:
    } // GEN-LAST:event_startSodaConstructorMenuItemActionPerformed

    private void startSodaRacerMenuItemActionPerformed() { // GEN-FIRST:event_startSodaRacerMenuItemActionPerformed
        try {
            wodka.ApplicationManager.current().startSodaracer();
        } catch (Throwable ex) {
            this.handleThrowable(ex);
        } // Add your handling code here:
    } // GEN-LAST:event_startSodaRacerMenuItemActionPerformed

    private void stopMenuItemActionPerformed() { // GEN-FIRST:event_stopMenuItemActionPerformed
        this.stop();
    } // GEN-LAST:event_stopMenuItemActionPerformed

    private void startMenuItemActionPerformed() { // GEN-FIRST:event_startMenuItemActionPerformed
        this.start();
    } // GEN-LAST:event_startMenuItemActionPerformed

    private void aboutMenuItemActionPerformed() { // GEN-FIRST:event_aboutMenuItemActionPerformed
        StringBuffer sb = new StringBuffer();
        sb.append("wodka version: "
                + wodka.ApplicationManager.current().getVersion());
        sb.append("\n");
        sb.append("program to breed soda robots using a genetic algorithm");
        sb.append("\n");
        sb.append("author: wolfgang wagner");
        sb.append("\n");
        sb.append("details see http://wodka.sourceforge.net");
        javax.swing.JOptionPane.showMessageDialog(this, sb.toString());
    } // GEN-LAST:event_aboutMenuItemActionPerformed

    private void viewProgressMenuItemActionPerformed() { // GEN-FIRST:event_viewProgressMenuItemActionPerformed
        try {
            ViewerFrame v = new ViewerFrame();
            v.setBreeder(breeder);
            v.setVisible(true);
        } catch (Throwable ex) {
            this.handleThrowable(ex);
        }
    } // GEN-LAST:event_viewProgressMenuItemActionPerformed

    private void exportMenuItemActionPerformed() { // GEN-FIRST:event_exportMenuItemActionPerformed
        try {
            if (breeder.canBeSaved()) {
                File dir = exportDir(breeder.getGenAlgo());
                Exporter.current().exportForBreeder((SodaraceGeneticAlgorithm) breeder.getGenAlgo(), dir);
                showDialog("The current models where exported to:\n"
                        + dir.getAbsolutePath());
            } else
                this.showInfo("You cannot export if no breeder is defined.");
        } catch (Throwable ex) {
            this.handleThrowableWithoutStop(ex);
        }
    } // GEN-LAST:event_exportMenuItemActionPerformed

    public File exportDir(GeneticAlgorithm genAlgo) {
        File homeDir = ApplicationManager.current().homeDirectory();
        String outDirName = genAlgo.getLabel() + "_export";
        File export = new File(homeDir, outDirName);
        if (!export.exists()) {
            export.mkdirs();
        }
        return export;
    }

    private void loadMenuItemActionPerformed() { // GEN-FIRST:event_loadMenuItemActionPerformed
        try {
            this.initFileChooser();
            int result = this.fileChooser.showOpenDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
                File selFile = fileChooser.getSelectedFile();
                String shortName = extractShortName(selFile);
                SodaraceGeneticAlgorithm ga = (SodaraceGeneticAlgorithm) PersistanceHandler.current()
                        .load(selFile);
                ga.setHandler(this);
                ga.setLabel(shortName);
                File f = this.fileChooser.getSelectedFile();
                breeder.setGenAlgo(ga);
                ga.getRacer().setRacerListener(ga);
                this.updateFromModel();
                this.showInfo("A new breeder was loaded from: " + f.getName());
                logger.info("A new breeder was loaded from: " + f.getName()
                        + "\n" + this.breeder.toInfoString());
            }
        } catch (Throwable ex) {
            this.handleThrowable(ex);
        }
    } // GEN-LAST:event_loadMenuItemActionPerformed

    private void saveMenuItemActionPerformed() { // GEN-FIRST:event_saveMenuItemActionPerformed
        try {
            save();
        } catch (Throwable ex) {
            this.handleThrowableWithoutStop(ex);
        }
    } // GEN-LAST:event_saveMenuItemActionPerformed

    private void editMenuItemActionPerformed() { // GEN-FIRST:event_editMenuItemActionPerformed
        try {
            GeneticAlgorithm ga = breeder.getGenAlgo();
            ListParam pl = ga.getParameterDescription().createListParam();
            ga.setParameterListFromFields(pl);
            int ret = WizardDialog
                    .showWizardDialog(this, ga.getLabel(), pl, ga);
            if (ret == WizardDialog.RETURN_FINISH) {
                if (breeder.isRunning())
                    breeder.stop();
                ga.setFieldsFromParameterList(pl);
                this
                        .showInfo("The parameters of the current GA where changed.");
            } else {
                this
                        .showInfo("The parameters of the current GA where not changed.");
            }
            updateFromModel();
        } catch (Throwable ex) {
            this.handleThrowable(ex);
        }
    } // GEN-LAST:event_editMenuItemActionPerformed

    private void newMenuItemActionPerformed() { // GEN-FIRST:event_newMenuItemActionPerformed
        try {
            newGA();
        } catch (Throwable ex) {
            this.handleThrowable(ex);
        }
    } // GEN-LAST:event_newMenuItemActionPerformed

    private void newGA() throws ParamException {
        SodaraceGeneticAlgorithm ga = new SodaraceGeneticAlgorithm();
        ListParam pl = ga.getParameterDescription().createListParam();
        ga.setParameterListFromFields(pl);
        int ret = WizardDialog.showWizardDialog(this, ga.getLabel(), pl, ga);
        if (ret == WizardDialog.RETURN_FINISH) {
            ga.setFieldsFromParameterList(pl);
            breeder.setGenAlgo(ga);
            ga.setHandler(this);
            if (breeder.isRunning())
                breeder.stop();
            this.showInfo("A new genetic algorithm was created");
            this.categorizedInfoPanel1.updateViewFromModel();
            logger.info("A new genetic algorithm was created:\n"
                    + this.breeder.toInfoString());
        } else {
            this.showInfo("No genetic algorithm was created");
        }
        updateFromModel();
    }

    private void stopButtonActionPerformed() { // GEN-FIRST:event_stopButtonActionPerformed
        this.stop();
    } // GEN-LAST:event_stopButtonActionPerformed

    private void startButtonActionPerformed() { // GEN-FIRST:event_startButtonActionPerformed
        this.start();
    } // GEN-LAST:event_startButtonActionPerformed

    /** Exit the Application */
    private void exitForm() { // GEN-FIRST:event_exitForm
        try {
            GeneticAlgorithm geneticAlgorithm = this.breeder.getGenAlgo();
            if (geneticAlgorithm != null && geneticAlgorithm.isChanged()) {
                int result = this.showConfirmDialogYesNoCancel(
                        "The current genetic algorithm was changed.",
                        "Do you want to save before you exit ?");
                if (result == YES) {
                    if (save())
                        System.exit(0);
                } else if (result == NO) {
                    System.exit(0);
                }
            } else if (showConfirmDialogYesNo("Do you really want to exit ?")) {
                System.exit(0);
            }
        } catch (Throwable e) {
            this.handleThrowable(e);
            System.exit(0);
        }
    } // GEN-LAST:event_exitForm

    private void stop() {
        try {
            this.breeder.stop();
            this.updateFromModel();
            logger.info("stoped");
        } catch (Throwable t) {
            this.handleThrowable(t);
        }
    }

    private void start() {
        try {
            this.breeder.start();
            this.updateFromModel();
            logger.info("started");
        } catch (Throwable t) {
            this.handleThrowable(t);
        }
    }

    private boolean save() throws java.io.IOException {
        boolean res = false;
        if (breeder.canBeSaved()) {
            this.initFileChooser();
            int result = this.fileChooser.showSaveDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
                File f = this.fileChooser.getSelectedFile();
                PersistanceHandler h = PersistanceHandler.current();
                GeneticAlgorithm ga = breeder.getGenAlgo();
                h.save(ga, f);
                ga.setLabel(this.extractShortName(f));
                ga.setChanged(false);
                this.updateFromModel();
                this.showInfo("The current breeder was saved to: "
                        + f.getAbsolutePath());
                res = true;
            } else {
                this.showInfo("The current breeder was not saved");
            }
        } else {
            this.showInfo("You cannot save if no breeder is defined.");
        }
        return res;
    }

    private String extractShortName(File f) {
        String name = f.getName();
        int index = name.indexOf('.');
        if (index >= 0) {
            name = name.substring(0, index);
        }
        return name;
    }

    public Breeder getBreeder() {
        return breeder;
    }

    public void setBreeder(Breeder breeder) {
        this.breeder = breeder;
        breeder.addListener(this);
        updateFromModel();
    }

    public void performEvaluationOfStepFinished(GeneticAlgorithm ga) {
        try {
            this.categorizedInfoPanel1.updateInfoFromModel();
        } catch (Throwable e) {
            this.handleThrowable(e);
        }
    }

    private void updateFromModel() {
        startMenuItem.setEnabled(breeder.canBeStarted());
        startButton.setEnabled(breeder.canBeStarted());
        stopButton.setEnabled(breeder.canBeStopped());
        stopMenuItem.setEnabled(breeder.canBeStopped());
        saveMenuItem.setEnabled(breeder.canBeSaved());
        this.editMenuItem.setEnabled(breeder.canBeStarted());
        this.exportMenuItem.setEnabled(breeder.canBeSaved());
        viewProgressMenuItem.setEnabled(breeder.getGenAlgo() != null);
        categorizedInfoPanel1.updateInfoFromModel();
    }

    void showInfo(String msg) {
        this.infoTextField.setText(msg);
    }

    public static void main(String args[]) {
        try {
            setUIFont();
            ApplicationManager.current().initLogging();
            BreederFrame f = new BreederFrame();
            f.setVisible(true);
            logger.info("Opened the breeder frame.");
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(-1);
        }
    }

    private static void setUIFont() throws Exception {
        ApplicationManager.current().initLogging();
        setLookAndFeel();
        String fontName = ApplicationManager.current().getProperty(
                ApplicationManager.PROP_FONT);
        int fontSize = ApplicationManager.current().getPropertyInt(
                ApplicationManager.PROP_FONT_SIZE);
        setFont(fontName, fontSize);
    }

    private static void setFont(String fontName, int fontSize) {
        Font font = new Font(fontName, Font.PLAIN, fontSize);
        FontUIResource f = new FontUIResource(font);
        java.util.Enumeration keys = UIManager.getDefaults().keys();
        while (keys.hasMoreElements()) {
            Object key = keys.nextElement();
            Object value = UIManager.get(key);
            if (value instanceof FontUIResource)
                UIManager.put(key, f);
            // changeColor(key, value);
        }
    }

    /**
     * Sets the look and feel of the breeder GUI. If problems occure during
     * loading metal is taken.
     * 
     */
    private static void setLookAndFeel() {
        String name = ApplicationManager.current().getProperty(
                "wodka.lookandfeel");
        if (name != null) {
            try {
                UIManager.setLookAndFeel(name);
            } catch (Exception e) {
                logger.warn("Could not load look and feel. " + name, e);
            }
        }
    }

    public void handleThrowable(Throwable ex) {
        this.breeder.stop();
        this.updateFromModel();
        handleThrowableWithoutStop(ex);
    }

    private void handleThrowableWithoutStop(Throwable ex) {
        logger.error(ex.getMessage(), ex);
        String message = ex.getMessage();
        if (ex instanceof java.security.AccessControlException)
            JOptionPane.showMessageDialog(this,
                    "A security exception has occurred. \n" + message);
        else {
            String msg = ex.toString();
            if (message == null || message.length() < 5)
                showDialog("An unexpected error has occured."
                        + "\n< "
                        + msg
                        + " >"
                        + "\n Please post an error message containing the $wodka_home/admin/wodka.log file\n"
                        + "\nat 'http://sourceforge.net/tracker/?func=add&group_id=63128&atid=502928'.");
            else
                showDialog(message);
        }
    }

    private void showDialog(String msg) {
        JOptionPane.showMessageDialog(this, msg);
    }

    private int showConfirmDialogYesNoCancel(String msg, String question) {
        return JOptionPane.showConfirmDialog(this, msg + "\n" + question);
    }

    private boolean showConfirmDialogYesNo(String question) {
        int result = JOptionPane.showConfirmDialog(this, question,
                "wodka question", JOptionPane.YES_NO_OPTION);
        return result == YES;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu aboutMenu;

    private javax.swing.JMenuItem aboutMenuItem;

    private javax.swing.JPanel buttonsFullPanel;

    private javax.swing.JPanel buttonsPanel;

    private wodka.view.CategorizedInfoPanel categorizedInfoPanel1;

    private javax.swing.JMenu controlMenu;

    private javax.swing.JMenuItem editMenuItem;

    private javax.swing.JMenuItem exportMenuItem;

    private javax.swing.JMenu fileMenu;

    private javax.swing.JTextField infoTextField;

    private javax.swing.JToggleButton infoToggleButton;

    private javax.swing.JSeparator jSeparator1;

    private javax.swing.JSeparator jSeparator3;

    private javax.swing.JMenuItem loadMenuItem;

    private javax.swing.JMenuBar menuBar;

    private javax.swing.JButton newButton;

    private javax.swing.JMenuItem newMenuItem;

    private javax.swing.JButton saveButton;

    private javax.swing.JMenuItem saveMenuItem;

    private javax.swing.JButton startButton;

    private javax.swing.JMenuItem startMenuItem;

    private javax.swing.JMenuItem startSodaConstructorMenuItem;

    private javax.swing.JMenuItem startSodaRacerMenuItem;

    private javax.swing.JButton stopButton;

    private javax.swing.JMenuItem stopMenuItem;

    private javax.swing.JMenu viewMenu;

    private javax.swing.JMenuItem viewProgressMenuItem;

    // End of variables declaration//GEN-END:variables
    private Breeder breeder = null;

    private JFileChooser fileChooser = null;
}